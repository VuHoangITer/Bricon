"""
Gunicorn configuration - T·ªëi ∆∞u cho Render Starter (512MB RAM, 0.5 CPU)
ƒê·∫∑t file n√†y c√πng c·∫•p v·ªõi run.py
"""

import os

# ==================== WORKER CONFIGURATION ====================
# ‚ö° Gi·ªØ ·ªü m·ª©c nh·∫π: ch·ªâ 1 worker v√† 2 threads ƒë·ªÉ tr√°nh OOM (Out of Memory)
workers = 1
threads = 2
worker_class = "gthread"  # D√πng thread-based ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu request c√πng l√∫c nh·∫π h∆°n fork

# ==================== TIMEOUT ====================
timeout = 90  # Gi·∫£m c√≤n 90s ƒë·ªÉ tr√°nh gi·ªØ k·∫øt n·ªëi qu√° l√¢u
graceful_timeout = 20
keepalive = 5

# ==================== MEMORY MANAGEMENT ====================
max_requests = 500
max_requests_jitter = 30

# ==================== PRELOAD ====================
# Kh√¥ng preload ƒë·ªÉ tr√°nh t·ªën RAM khi forking (ch·ªâ 1 worker n√™n kh√¥ng c·∫ßn preload)
preload_app = False

# ==================== BINDING ====================
bind = f"0.0.0.0:{os.environ.get('PORT', '10000')}"

# ==================== LOGGING ====================
accesslog = "-"
errorlog = "-"
loglevel = "info"

# ==================== PERFORMANCE ====================
backlog = 512  # Gi·∫£m backlog ƒë·ªÉ ti·∫øt ki·ªám RAM

# ==================== HOOKS ====================
def on_starting(server):
    print("üöÄ [Gunicorn] Starting (Render Starter mode)")
    print(f"   - Workers: {workers}")
    print(f"   - Threads: {threads}")
    print(f"   - Worker class: {worker_class}")
    print(f"   - Timeout: {timeout}s")


def post_fork(server, worker):
    print(f"‚úÖ [Worker {worker.pid}] Spawned")


def worker_int(worker):
    print(f"‚ö†Ô∏è [Worker {worker.pid}] Interrupted")


def worker_abort(worker):
    print(f"‚ùå [Worker {worker.pid}] Aborted")


def worker_exit(server, worker):
    print(f"üëã [Worker {worker.pid}] Exited")
