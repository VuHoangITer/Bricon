"""
Gunicorn configuration file - T·ªëi ∆∞u cho Render Starter (512MB RAM)
ƒê·∫∑t file n√†y c√πng c·∫•p v·ªõi run.py
"""

import os
import multiprocessing

# ==================== WORKER CONFIGURATION ====================
# üî• T·ªêI ∆ØU: Ch·ªâ d√πng 2 workers cho 512MB RAM
# C√¥ng th·ª©c: (2 √ó CPU cores) + 1 = (2 √ó 0.5) + 1 ‚âà 2 workers
workers = 2

# Threads per worker (tƒÉng concurrency m√† kh√¥ng t·ªën nhi·ªÅu RAM)
threads = 2

# Worker class
worker_class = 'sync'  # ho·∫∑c 'gthread' n·∫øu mu·ªën thread-based

# ==================== TIMEOUT ====================
# Timeout cho requests (gi√¢y)
timeout = 120  # 2 ph√∫t cho requests ch·∫≠m (chatbot, AI)
graceful_timeout = 30  # Th·ªùi gian ƒë·ªÉ worker shutdown gracefully
keepalive = 5  # Keep-alive timeout

# ==================== MEMORY MANAGEMENT ====================
# Restart worker sau N requests ƒë·ªÉ tr√°nh memory leak
max_requests = 1000
max_requests_jitter = 50  # Random jitter ƒë·ªÉ tr√°nh restart ƒë·ªìng th·ªùi

# ==================== PRELOAD ====================
# Preload app tr∆∞·ªõc khi fork workers (ti·∫øt ki·ªám RAM)
preload_app = True

# ==================== BINDING ====================
bind = f"0.0.0.0:{os.environ.get('PORT', '10000')}"

# ==================== LOGGING ====================
accesslog = '-'  # Log to stdout
errorlog = '-'   # Log to stderr
loglevel = 'info'

# ==================== PERFORMANCE ====================
# Backlog queue size
backlog = 2048

# Worker connections (cho async workers)
# worker_connections = 1000  # Ch·ªâ d√πng n·∫øu worker_class = 'gevent' ho·∫∑c 'eventlet'

# ==================== HOOKS ====================
def on_starting(server):
    """Ch·∫°y khi Gunicorn kh·ªüi ƒë·ªông"""
    print("üöÄ [Gunicorn] Starting with:")
    print(f"   - Workers: {workers}")
    print(f"   - Threads/worker: {threads}")
    print(f"   - Timeout: {timeout}s")
    print(f"   - RAM limit: ~512MB")


def worker_int(worker):
    """X·ª≠ l√Ω khi worker b·ªã interrupt"""
    print(f"‚ö†Ô∏è [Worker {worker.pid}] Interrupted")


def worker_abort(worker):
    """X·ª≠ l√Ω khi worker b·ªã abort"""
    print(f"‚ùå [Worker {worker.pid}] Aborted")


def post_fork(server, worker):
    """Ch·∫°y sau khi fork worker m·ªõi"""
    print(f"‚úÖ [Worker {worker.pid}] Spawned")


def pre_fork(server, worker):
    """Ch·∫°y tr∆∞·ªõc khi fork worker"""
    pass


def worker_exit(server, worker):
    """Ch·∫°y khi worker exit"""
    print(f"üëã [Worker {worker.pid}] Exited")