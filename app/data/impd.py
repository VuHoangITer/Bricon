"""
Script Import S·∫£n Ph·∫©m BRICON t·ª´ sanpham.json
==============================================
Ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc: python -m app.data.import_products

T√≠nh nƒÉng:
- Import categories v√† products t·ª´ sanpham.json
- T·ª± ƒë·ªông t·∫°o slug t·ª´ t√™n
- C·∫≠p nh·∫≠t n·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i
- Validate d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
- Log chi ti·∫øt qu√° tr√¨nh import
"""

import json
import os
import sys
from datetime import datetime
from slugify import slugify

# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·ªÉ import ƒë∆∞·ª£c
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from app import create_app, db
from app.models import Product, Category
from app.data import PRODUCTS_JSON


class ProductImporter:
    """Class x·ª≠ l√Ω import s·∫£n ph·∫©m"""

    def __init__(self, json_file=None):
        self.app = create_app()
        self.json_file = json_file or PRODUCTS_JSON
        self.stats = {
            'categories_created': 0,
            'categories_updated': 0,
            'products_created': 0,
            'products_updated': 0,
            'errors': 0,
            'skipped': 0
        }
        self.categories_map = {}

    def load_json_data(self):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON"""
        if not os.path.exists(self.json_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {self.json_file}")
            return None

        try:
            with open(self.json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            print("\n" + "=" * 70)
            print("üì¶ TH√îNG TIN FILE D·ªÆ LI·ªÜU")
            print("=" * 70)
            print(f"üìÑ File: {os.path.basename(self.json_file)}")
            print(f"üìä Version: {data.get('version', 'N/A')}")
            print(f"üìÖ C·∫≠p nh·∫≠t: {data.get('last_updated', 'N/A')}")
            print(f"üì¶ T·ªïng s·∫£n ph·∫©m: {data.get('total_products', 0)}")
            print(f"üìÇ T·ªïng danh m·ª•c: {len(data.get('categories', []))}")
            print("=" * 70 + "\n")

            return data

        except json.JSONDecodeError as e:
            print(f"‚ùå L·ªói ƒë·ªçc JSON t·∫°i d√≤ng {e.lineno}: {e.msg}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def import_categories(self, categories_data):
        """Import danh m·ª•c s·∫£n ph·∫©m"""
        if not categories_data:
            print("‚ö†Ô∏è  Kh√¥ng c√≥ danh m·ª•c n√†o ƒë·ªÉ import")
            return {}

        print("\n" + "=" * 70)
        print("üìÇ IMPORT DANH M·ª§C S·∫¢N PH·∫®M")
        print("=" * 70)

        with self.app.app_context():
            for idx, cat_data in enumerate(categories_data, 1):
                try:
                    cat_name = cat_data.get('name')
                    if not cat_name:
                        print(f"‚ö†Ô∏è  [{idx}] B·ªè qua: Thi·∫øu t√™n danh m·ª•c")
                        self.stats['skipped'] += 1
                        continue

                    cat_slug = cat_data.get('slug') or slugify(cat_name)

                    # T√¨m ho·∫∑c t·∫°o m·ªõi category
                    category = Category.query.filter_by(slug=cat_slug).first()

                    if category:
                        # C·∫≠p nh·∫≠t
                        category.name = cat_name
                        category.description = cat_data.get('description', '')
                        category.image = cat_data.get('image')
                        # ‚ùå REMOVED: meta_description (kh√¥ng c√≥ trong Category model)

                        print(f"üìù [{idx}] C·∫≠p nh·∫≠t: {cat_name}")
                        self.stats['categories_updated'] += 1
                    else:
                        # T·∫°o m·ªõi
                        category = Category(
                            name=cat_name,
                            slug=cat_slug,
                            description=cat_data.get('description', ''),
                            image=cat_data.get('image'),
                            # ‚ùå REMOVED: meta_description (kh√¥ng c√≥ trong Category model)
                            is_active=True
                        )
                        db.session.add(category)
                        db.session.flush()  # ƒê·ªÉ l·∫•y ID

                        print(f"‚úÖ [{idx}] T·∫°o m·ªõi: {cat_name} (ID: {category.id})")
                        self.stats['categories_created'] += 1

                    # L∆∞u v√†o map
                    self.categories_map[cat_name] = category.id


                except Exception as e:
                    print(f"‚ùå [{idx}] L·ªói: {cat_data.get('name', 'Unknown')} - {str(e)}")
                    self.stats['errors'] += 1
                    db.session.rollback()
                    continue

            # Commit categories
            try:
                db.session.commit()
                print(f"\nüíæ ƒê√£ l∆∞u {len(self.categories_map)} danh m·ª•c v√†o database")
            except Exception as e:
                print(f"\n‚ùå L·ªói commit categories: {e}")
                db.session.rollback()
                return {}

        return self.categories_map

    def import_products(self, products_data):
        """Import s·∫£n ph·∫©m"""
        if not products_data:
            print("\n‚ö†Ô∏è  Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ import")
            return

        print("\n" + "=" * 70)
        print("üß± IMPORT S·∫¢N PH·∫®M")
        print("=" * 70)

        with self.app.app_context():
            for idx, prod_data in enumerate(products_data, 1):
                try:
                    prod_name = prod_data.get('name')
                    if not prod_name:
                        print(f"‚ö†Ô∏è  [{idx}] B·ªè qua: Thi·∫øu t√™n s·∫£n ph·∫©m")
                        self.stats['skipped'] += 1
                        continue

                    # L·∫•y category_id thay v√¨ ƒë·ªëi t∆∞·ª£ng category
                    cat_name = prod_data.get('category')
                    if cat_name not in self.categories_map:
                        print(f"‚ö†Ô∏è  [{idx}] B·ªè qua {prod_name}: Kh√¥ng t√¨m th·∫•y danh m·ª•c '{cat_name}'")
                        self.stats['skipped'] += 1
                        continue

                    category_id = self.categories_map[cat_name]
                    prod_slug = prod_data.get('slug') or slugify(prod_name)

                    # T√¨m ho·∫∑c t·∫°o m·ªõi product
                    product = Product.query.filter_by(slug=prod_slug).first()

                    if product:
                        # C·∫≠p nh·∫≠t
                        product.name = prod_name
                        product.description = prod_data.get('description', '')
                        product.category_id = category_id
                        product.image = prod_data.get('image')
                        product.price = prod_data.get('price', 0)
                        product.old_price = prod_data.get('old_price')
                        product.is_featured = prod_data.get('is_featured', False)

                        # Th√¥ng tin k·ªπ thu·∫≠t
                        product.composition = prod_data.get('composition')
                        product.production = prod_data.get('production')
                        product.application = prod_data.get('application')
                        product.expiry = prod_data.get('expiry')
                        product.packaging = prod_data.get('packaging')
                        product.colors = prod_data.get('colors')
                        product.technical_specs = prod_data.get('technical_specs')
                        product.standards = prod_data.get('standards')

                        # ‚ùå REMOVED: brand (kh√¥ng c√≥ trong Product model)
                        # ‚ùå REMOVED: meta_description (kh√¥ng c√≥ trong Product model)
                        # ‚ùå REMOVED: meta_keywords (kh√¥ng c√≥ trong Product model)

                        product.updated_at = datetime.utcnow()

                        print(f"üìù [{idx}] C·∫≠p nh·∫≠t: {prod_name}")
                        self.stats['products_updated'] += 1

                    else:
                        # T·∫°o m·ªõi
                        product = Product(
                            name=prod_name,
                            slug=prod_slug,
                            description=prod_data.get('description', ''),
                            category_id=category_id,
                            image=prod_data.get('image'),
                            price=prod_data.get('price', 0),
                            old_price=prod_data.get('old_price'),
                            is_featured=prod_data.get('is_featured', True),
                            is_active=True,

                            # Th√¥ng tin k·ªπ thu·∫≠t
                            composition=prod_data.get('composition'),
                            production=prod_data.get('production'),
                            application=prod_data.get('application'),
                            expiry=prod_data.get('expiry'),
                            packaging=prod_data.get('packaging'),
                            colors=prod_data.get('colors'),
                            technical_specs=prod_data.get('technical_specs'),
                            standards=prod_data.get('standards'),

                            # ‚ùå REMOVED: brand (kh√¥ng c√≥ trong Product model)
                            # ‚ùå REMOVED: meta_description (kh√¥ng c√≥ trong Product model)
                            # ‚ùå REMOVED: meta_keywords (kh√¥ng c√≥ trong Product model)
                        )
                        db.session.add(product)

                        print(f"‚úÖ [{idx}] T·∫°o m·ªõi: {prod_name}")
                        self.stats['products_created'] += 1

                    # Commit t·ª´ng s·∫£n ph·∫©m ƒë·ªÉ tr√°nh rollback to√†n b·ªô khi l·ªói
                    db.session.commit()

                except Exception as e:
                    print(f"‚ùå [{idx}] L·ªói: {prod_data.get('name', 'Unknown')} - {str(e)}")
                    self.stats['errors'] += 1
                    db.session.rollback()
                    continue

    def print_summary(self):
        """In t·ªïng k·∫øt"""
        print("\n" + "=" * 70)
        print("üìä T·ªîNG K·∫æT IMPORT")
        print("=" * 70)
        print(f"üìÇ Danh m·ª•c:")
        print(f"   ‚úÖ T·∫°o m·ªõi:    {self.stats['categories_created']}")
        print(f"   üìù C·∫≠p nh·∫≠t:   {self.stats['categories_updated']}")
        print(f"\nüß± S·∫£n ph·∫©m:")
        print(f"   ‚úÖ T·∫°o m·ªõi:    {self.stats['products_created']}")
        print(f"   üìù C·∫≠p nh·∫≠t:   {self.stats['products_updated']}")
        print(f"\n‚ö†Ô∏è  B·ªè qua:      {self.stats['skipped']}")
        print(f"‚ùå L·ªói:         {self.stats['errors']}")
        print("=" * 70)

        total_success = (
                self.stats['categories_created'] +
                self.stats['categories_updated'] +
                self.stats['products_created'] +
                self.stats['products_updated']
        )

        if total_success > 0:
            print(f"\nüéâ Ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {total_success} m·ª•c")

        if self.stats['errors'] > 0:
            print(f"‚ö†Ô∏è  C√≥ {self.stats['errors']} l·ªói trong qu√° tr√¨nh import")

    def run(self):
        """Ch·∫°y to√†n b·ªô qu√° tr√¨nh import"""
        print("\n" + "üöÄ " * 35)
        print("   BRICON - IMPORT S·∫¢N PH·∫®M T·ª™ JSON")
        print("üöÄ " * 35)

        # Load d·ªØ li·ªáu
        data = self.load_json_data()
        if not data:
            print("\n‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu. D·ª´ng import.")
            return False

        # X√°c nh·∫≠n
        print("\n‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc mu·ªën import d·ªØ li·ªáu?")
        print("   (D·ªØ li·ªáu c≈© s·∫Ω ƒë∆∞·ª£c C·∫¨P NH·∫¨T n·∫øu tr√πng slug)")
        confirm = input("\nüëâ Nh·∫≠p 'yes' ƒë·ªÉ ti·∫øp t·ª•c: ").strip().lower()

        if confirm != 'yes':
            print("\n‚ùå ƒê√£ h·ªßy import")
            return False

        # Import categories
        categories = data.get('categories', [])
        self.import_categories(categories)

        if not self.categories_map:
            print("\n‚ùå Kh√¥ng c√≥ danh m·ª•c n√†o ƒë∆∞·ª£c import. D·ª´ng import s·∫£n ph·∫©m.")
            return False

        # Import products
        products = data.get('products', [])
        self.import_products(products)

        # T·ªïng k·∫øt
        self.print_summary()

        return True


def main():
    """H√†m ch√≠nh"""
    try:
        importer = ProductImporter()
        success = importer.run()
        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  ƒê√£ h·ªßy import b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(1)

    except Exception as e:
        print(f"\n‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()