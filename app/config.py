import os
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()


class Config:
    """C·∫•u h√¨nh t·ªëi ∆∞u cho Render Starter (512MB RAM, 0.5 CPU)"""

    # ==================== C∆† B·∫¢N ====================
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'

    # ==================== DATABASE - T·ªêI ∆ØU QUAN TR·ªåNG ====================
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
                              'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), '../app.db')

    # Fix l·ªói v·ªõi Render PostgreSQL URL
    if SQLALCHEMY_DATABASE_URI and SQLALCHEMY_DATABASE_URI.startswith('postgres://'):
        SQLALCHEMY_DATABASE_URI = SQLALCHEMY_DATABASE_URI.replace('postgres://', 'postgresql://', 1)

    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # üî• T·ªêI ∆ØU QUAN TR·ªåNG: Connection Pool cho m√¥i tr∆∞·ªùng h·∫°n ch·∫ø
    # Render Starter ch·ªâ cho ph√©p ~20 connections ƒë·ªìng th·ªùi
    # 2 workers √ó 3 pool_size = 6 connections (an to√†n)
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_size': 3,  # Gi·∫£m t·ª´ 5 xu·ªëng 3 connections/worker
        'pool_recycle': 300,  # Recycle connection sau 5 ph√∫t (tr√°nh "server closed connection")
        'pool_pre_ping': True,  # Ki·ªÉm tra connection tr∆∞·ªõc khi d√πng (tr√°nh stale connections)
        'max_overflow': 1,  # Ch·ªâ cho ph√©p th√™m 1 connection t·∫°m th·ªùi
        'pool_timeout': 10,  # Timeout 10s khi ch·ªù connection (tr√°nh deadlock)
        'connect_args': {
            'connect_timeout': 10,  # Timeout khi k·∫øt n·ªëi database
            'options': '-c statement_timeout=30000'  # Query timeout 30s
        }
    }

    # ==================== UPLOAD FILE ====================
    BASE_DIR = os.path.abspath(os.path.dirname(__file__))
    UPLOAD_FOLDER = os.path.join(BASE_DIR, 'static', 'uploads')

    # Gi·∫£m k√≠ch th∆∞·ªõc upload ƒë·ªÉ ti·∫øt ki·ªám RAM khi x·ª≠ l√Ω
    MAX_CONTENT_LENGTH = 10 * 1024 * 1024  # Gi·∫£m t·ª´ 16MB xu·ªëng 10MB
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp', 'ico', 'svg'}  # B·ªè ico, svg n·∫øu kh√¥ng d√πng

    # ==================== PAGINATION ====================
    POSTS_PER_PAGE = 12
    BLOGS_PER_PAGE = 9

    # ==================== SEO ====================
    SITE_NAME = 'Briconvn'
    SITE_DESCRIPTION = 'Doanh nghi·ªáp chuy√™n s·∫£n xu·∫•t v√† ph√¢n ph·ªëi keo d√°n g·∫°ch, keo ch·∫£ ron & ch·ªëng th·∫•m'

    # ==================== GEMINI CHATBOT ====================
    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
    CHATBOT_REQUEST_LIMIT = 20
    CHATBOT_REQUEST_WINDOW = 7200
    CHATBOT_ENABLED = True

    # üî• TH√äM: Timeout cho Gemini API (tr√°nh block v√¥ th·ªùi h·∫°n)
    GEMINI_TIMEOUT = 15  # 15 gi√¢y timeout

    # ==================== FLASK-COMPRESS ====================
    # N√©n response ƒë·ªÉ gi·∫£m bƒÉng th√¥ng
    COMPRESS_MIMETYPES = [
        'text/html', 'text/css', 'text/xml', 'application/json',
        'application/javascript', 'text/javascript'
    ]
    COMPRESS_LEVEL = 6  # C√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† t·ª∑ l·ªá n√©n
    COMPRESS_MIN_SIZE = 500  # Ch·ªâ n√©n response > 500 bytes

    # ==================== CACHING ====================
    # Simple in-memory cache (kh√¥ng d√πng Redis ƒë·ªÉ ti·∫øt ki·ªám)
    CACHE_TYPE = 'simple'
    CACHE_DEFAULT_TIMEOUT = 300  # Cache 5 ph√∫t

    # ==================== SECURITY ====================
    # Gi·ªõi h·∫°n request ƒë·ªÉ tr√°nh b·ªã spam
    RATELIMIT_ENABLED = True
    RATELIMIT_STORAGE_URL = 'memory://'  # In-memory rate limiting

    @staticmethod
    def init_app(app):
        """Kh·ªüi t·∫°o c·∫•u h√¨nh cho app"""
        # ‚ö†Ô∏è B·ªé PH·∫¶N T·∫†O TH·ª¶ C√îNG: Cloudinary x·ª≠ l√Ω, kh√¥ng c·∫ßn local uploads
        # Ch·ªâ t·∫°o folder n·∫øu th·ª±c s·ª± c·∫ßn (v√≠ d·ª•: temp files)

        # Logging cho production
        import logging
        from logging.handlers import RotatingFileHandler

        if not app.debug:
            # File handler v·ªõi rotation ƒë·ªÉ tr√°nh log qu√° l·ªõn
            if not os.path.exists('logs'):
                os.mkdir('logs')
            file_handler = RotatingFileHandler(
                'logs/briconvn.log',
                maxBytes=1024 * 1024,  # 1MB
                backupCount=3  # Gi·ªØ 3 file backup
            )
            file_handler.setFormatter(logging.Formatter(
                '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
            ))
            file_handler.setLevel(logging.INFO)
            app.logger.addHandler(file_handler)
            app.logger.setLevel(logging.INFO)
            app.logger.info('Briconvn startup')


class DevelopmentConfig(Config):
    """C·∫•u h√¨nh cho m√¥i tr∆∞·ªùng development"""
    DEBUG = True
    SQLALCHEMY_ECHO = True  # Log t·∫•t c·∫£ SQL queries


class ProductionConfig(Config):
    """C·∫•u h√¨nh cho production (Render)"""
    DEBUG = False
    SQLALCHEMY_ECHO = False  # T·∫Øt SQL logging ƒë·ªÉ ti·∫øt ki·ªám I/O

    # TƒÉng timeout cho production
    GEMINI_TIMEOUT = 20


# Ch·ªçn config d·ª±a tr√™n environment
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': Config
}